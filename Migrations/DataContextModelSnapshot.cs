// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using screener;
using System;

namespace screener.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("StockMarket.CompanyInformation", b =>
                {
                    b.Property<string>("symbol");

                    b.Property<string>("series");

                    b.Property<string>("isinNumber");

                    b.Property<string>("companyName")
                        .IsRequired();

                    b.Property<DateTime>("dateOfListing");

                    b.Property<float>("faceValue");

                    b.Property<int>("marketLot");

                    b.Property<float>("paidUpvalue");

                    b.HasKey("symbol", "series", "isinNumber");

                    b.HasIndex("symbol", "isinNumber");

                    b.ToTable("companyInformation");
                });

            modelBuilder.Entity("StockMarket.DailyStockData", b =>
                {
                    b.Property<string>("isinNumber");

                    b.Property<DateTime>("date");

                    b.Property<string>("series");

                    b.Property<float>("close");

                    b.Property<long>("deliverableQty");

                    b.Property<float>("deliveryPercentage");

                    b.Property<float>("high");

                    b.Property<float>("lastPrice");

                    b.Property<float>("low");

                    b.Property<float>("open");

                    b.Property<float>("prevClose");

                    b.Property<string>("symbol")
                        .IsRequired();

                    b.Property<long>("totalTradedQty");

                    b.Property<float>("totalTradedValue");

                    b.Property<long>("totalTrades");

                    b.HasKey("isinNumber", "date", "series");

                    b.HasIndex("symbol", "isinNumber", "date", "series");

                    b.ToTable("stockData");
                });
#pragma warning restore 612, 618
        }
    }
}
